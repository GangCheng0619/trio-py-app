Suppose one task is blocked trying to use a resource – for example,
reading from a socket – and while it's doing this, another task closes
the resource. Previously, this produced undefined behavior. Now,
closing a resource causes pending operations on that resource to
terminate immediately with a :exc:`ClosedResourceError`.

``ClosedStreamError`` and ``ClosedListenerError`` are now aliases for
:exc:`ClosedResourceError`, and deprecated.

For this to work, Trio needs to know when a resource has been closed.
To facilitate this, new functions have been added:
:func:`trio.hazmat.notify_fd_close` and
:func:`trio.hazmat.notify_socket_close`. If you're using Trio's
built-in wrappers like :cls:`~trio.SocketStream` or
:mod:`trio.socket`, then you don't need to worry about this, but if
you're using the low-level functions like
:func:`trio.hazmat.wait_readable`, you should make sure to call these
functions at appropriate times.
